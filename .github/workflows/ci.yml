name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - published

jobs:
  build:
    name: "${{ matrix.build_types }}"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      BUILD_TYPE: ${{ matrix.build_types }}

    strategy:
      fail-fast: false
      matrix:
        build_types: ["BACKEND", "FRONTEND"]

    services:
      gitea:
        image: blueworrybear/gitea-docker
        ports:
          - 3000:3000

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Golang
        if: env.BUILD_TYPE == 'BACKEND'
        uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - name: Go Lint
        if: env.BUILD_TYPE == 'BACKEND'
        run: |
          go get -u golang.org/x/lint/golint
          golint -set_exit_status ./...

      - name: Go Test
        if: env.BUILD_TYPE == 'BACKEND'
        env:
          GITEA_SECRET: ${{ secrets.GITEA_SECRET }}
        run: |
          go test -tags="gitea" ./...

      - name: Setup NPM
        if: env.BUILD_TYPE == 'FRONTEND'
        run: |
          cd web
          npm install

      - name: Frontend Lint
        if: env.BUILD_TYPE == 'FRONTEND'
        run: |
          cd web
          npm run lint -- --no-fix

      - name: Frontend Unit Test
        if: env.BUILD_TYPE == 'FRONTEND'
        run: |
          cd web
          npm run test:unit

  release:
    name: "release ${{matrix.os}}"
    if: github.event_name  == 'release'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - name: Build Ubuntu Binary
        if: matrix.os == 'ubuntu-latest'
        run: |
          go build -o covergates-server ./cmd/server
          go build -o covergates ./cmd/cli
          zip covergates-server.ubuntu.zip covergates-server
          zip covergates.ubuntu.zip covergates

      - name: Build Windows Binary
        if: matrix.os == 'windows-latest'
        run: |
          go build -o covergates-server.exe ./cmd/server
          go build -o covergates.exe ./cmd/cli
          zip covergates-server.windows.zip covergates-server.exe
          zip covergates.windows.zip covergates.exe

      - name: Upload Linux Binary
        uses: actions/github-script@v2
        env:
          OS_TYPE: "${{matrix.os}}"
        with:
          github-token: ${{secrets.DEPLOY_KEY}}
          script: |
            const fs = require('fs');
            const getHeaders = (filePath, fileName) => {
              const extension = fileName.split('.').pop()
              const size = fs.statSync(filePath).size
              const options = {
                'json': 'text/json',
                'zip': 'application/zip',
                'txt': 'text/plain',
                'ts': 'application/typescript'
              }

              return {
                'content-type': options[extension],
                'content-length': size
              }
            }
            const tag = `${process.env.GITHUB_REF}`.split('/').pop();
            const repo = `${process.env.GITHUB_REPOSITORY}`.split('/');
            const response = await github.repos.getReleaseByTag({
              owner: repo[0],
              repo: repo[1],
              tag: tag
            });
            const release = response.data.id;
            const url = `https://uploads.github.com/repos/${repo[0]}/${repo[1]}/releases/${release}/assets{?name,label}`;
            const os = `${process.env.OS_TYPE}`.split('-').shift();
            const files = ['covergates-server', 'covergates'];
            for (const file of files) {
              const name = `${file}.${os}.zip`;
              await github.repos.uploadReleaseAsset({
                url: url,
                headers: getHeaders(file, file),
                data: fs.createReadStream(file),
                name: file
              });
            }
