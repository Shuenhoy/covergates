name: CD
on:
  release:
    types:
      - published
env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  SERVER_API_URL: https://covergates.com/api/v1
  RELEASE_BRANCH: release

jobs:
  release:
    name: "Release"
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: ./go/src/github.com/covergates/covergates

      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - run: go get github.com/karalabe/xgo

      - name: Build Binary
        working-directory: "./go/src/github.com/covergates/covergates"
        run: |
          export GOPATH="$GITHUB_WORKSPACE/go"
          export GITHUB_TAG=$(echo $GITHUB_REF | rev | cut -d '/' -f 1| rev)
          go mod vendor
          zip -r "$GITHUB_WORKSPACE/covergates.$GITHUB_TAG.src.zip" ./ -x "*.git*" -x "*.zip" -x "*node_modules*"
          targets="windows/amd64,windows/386,darwin/amd64,darwin/386,linux/amd64,linux/386,linux/arm,linux/arm64"
          server_flag="-X main.Version=$GITHUB_TAG"
          cli_flag="-X main.Version=$GITHUB_TAG -X main.CoverGatesAPI=$SERVER_API_URL"
          xgo -ldflags="$server_flag" --targets="$targets" -out covergates-server ./cmd/server
          xgo -ldflags="$cli_flag" --targets="$targets" -out covergates ./cmd/cli
          outputs=(covergates covergates-server)
          archs=(darwin-10.6-386 darwin-10.6-amd64 linux-386 linux-amd64 linux-arm-5 linux-arm64 windows-4.0-386.exe windows-4.0-amd64.exe)
          mkdir -p dist
          for arch in ${archs[@]};do
            rm -rf ./dist/*
            for output in ${outputs[@]};do
              filename="${output}-$arch"
              ext=$([[ "$filename" != *darwin* ]]  && [[ "$filename" = *.* ]] && echo ".${filename##*.}" || echo '')
              mv -f $filename "./dist/${output}${ext}"
            done
            arch=$(echo $arch | sed 's/\.exe//g')
            cd dist && tar -zcvf "$GITHUB_WORKSPACE/covergates-${GITHUB_TAG}-${arch}.tar.gz" ./ && cd ..
          done

      - name: Upload Binary
        uses: actions/github-script@v2
        env:
          OS_TYPE: "${{matrix.os}}"
        with:
          github-token: ${{secrets.DEPLOY_KEY}}
          script: |
            const fs = require('fs');
            const getHeaders = (filePath, fileName) => {
              const extension = fileName.split('.').pop()
              const size = fs.statSync(filePath).size
              const options = {
                'json': 'text/json',
                'zip': 'application/zip',
                'gz': 'application/gzip',
                'txt': 'text/plain',
                'ts': 'application/typescript'
              }

              return {
                'content-type': options[extension],
                'content-length': size
              }
            }
            const tag = `${process.env.GITHUB_REF}`.split('/').pop();
            const repo = `${process.env.GITHUB_REPOSITORY}`.split('/');
            const response = await github.repos.getReleaseByTag({
              owner: repo[0],
              repo: repo[1],
              tag: tag
            });
            const release = response.data.id;
            const url = `https://uploads.github.com/repos/${repo[0]}/${repo[1]}/releases/${release}/assets{?name,label}`;
            const archs = ['darwin-10.6-386', 'darwin-10.6-amd64', 'linux-386', 'linux-amd64', 'linux-arm-5', 'linux-arm64', 'windows-4.0-386', 'windows-4.0-amd64'];
            for (const arch of archs) {
              const name = `covergates-${tag}-${arch}.tar.gz`;
              await github.repos.uploadReleaseAsset({
                url: url,
                headers: getHeaders(name, name),
                data: fs.createReadStream(name),
                name: name
              });
            }
            const src = `covergates.${tag}.src.zip`;
            await github.repos.uploadReleaseAsset({
              url: url,
              headers: getHeaders(src, src),
              data: fs.createReadStream(src),
              name: src
            });

  cloudrun:
    name: "Google Cloud Run"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "290.0.1"
          service_account_key: ${{ secrets.RUN_SA_KEY }}
          project_id: ${{ secrets.RUN_PROJECT }}
      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      # Build the Docker image
      - name: Build
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/covergates" .
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/covergates"
  docker:
    name: "Build and push Docker"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout Action
        uses: actions/checkout@v2
        with:
          repository: covergates/github-actions
          path: actions

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Server
        uses: docker/build-push-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tags: covergates/covergates:latest
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true

      - name: Build Action
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: covergates/actions
          dockerfile: actions/Dockerfile.build
          tags: latest
