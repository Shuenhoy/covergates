name: CD
on:
  release:
    types:
      - published
env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  SERVER_API_URL: https://covergates.com/api/v1

jobs:
  release:
    name: "release ${{matrix.os}}"
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - name: Build Ubuntu Binary
        if: matrix.os == 'ubuntu-latest'
        run: |
          export GITHUB_TAG=$(echo $GITHUB_REF | rev | cut -d '/' -f 1| rev)
          go mod vendor
          zip -r covergates.$GITHUB_TAG.src.zip ./ -x "*.git*" -x "*.zip" -x "*node_modules*"
          go build -o covergates-server -ldflags="-X main.Version=$GITHUB_TAG" ./cmd/server
          go build -o covergates -ldflags="-X main.Version=$GITHUB_TAG main.CoverGatesAPI=$SERVER_API_URL" ./cmd/cli
          zip covergates-server.$GITHUB_TAG.ubuntu.zip covergates-server
          zip covergates.$GITHUB_TAG.ubuntu.zip covergates

      - name: Upload Binary
        uses: actions/github-script@v2
        env:
          OS_TYPE: "${{matrix.os}}"
        with:
          github-token: ${{secrets.DEPLOY_KEY}}
          script: |
            const fs = require('fs');
            const getHeaders = (filePath, fileName) => {
              const extension = fileName.split('.').pop()
              const size = fs.statSync(filePath).size
              const options = {
                'json': 'text/json',
                'zip': 'application/zip',
                'txt': 'text/plain',
                'ts': 'application/typescript'
              }

              return {
                'content-type': options[extension],
                'content-length': size
              }
            }
            const tag = `${process.env.GITHUB_REF}`.split('/').pop();
            const repo = `${process.env.GITHUB_REPOSITORY}`.split('/');
            const response = await github.repos.getReleaseByTag({
              owner: repo[0],
              repo: repo[1],
              tag: tag
            });
            const release = response.data.id;
            const url = `https://uploads.github.com/repos/${repo[0]}/${repo[1]}/releases/${release}/assets{?name,label}`;
            const os = `${process.env.OS_TYPE}`.split('-').shift();
            const files = [`covergates-server.${tag}.${os}`, `covergates.${tag}.${os}`];
            if ( process.env.OS_TYPE === 'ubuntu-latest' ) {
              files.push(`covergates-server.${tag}.src`);
            }
            for (const file of files) {
              const name = `${file}.zip`;
              await github.repos.uploadReleaseAsset({
                url: url,
                headers: getHeaders(name, name),
                data: fs.createReadStream(name),
                name: name
              });
            }
  cloudrun:
    name: "google-cloud-deploy"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "290.0.1"
          service_account_key: ${{ secrets.RUN_SA_KEY }}
          project_id: ${{ secrets.RUN_PROJECT }}
      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      # Build the Docker image
      - name: Build
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/covergates" .
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/covergates"
