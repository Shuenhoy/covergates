// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/code-devel-cover/CodeCover/core (interfaces: SCMClientService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	core "github.com/code-devel-cover/CodeCover/core"
	scm "github.com/drone/go-scm/scm"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSCMClientService is a mock of SCMClientService interface
type MockSCMClientService struct {
	ctrl     *gomock.Controller
	recorder *MockSCMClientServiceMockRecorder
}

// MockSCMClientServiceMockRecorder is the mock recorder for MockSCMClientService
type MockSCMClientServiceMockRecorder struct {
	mock *MockSCMClientService
}

// NewMockSCMClientService creates a new mock instance
func NewMockSCMClientService(ctrl *gomock.Controller) *MockSCMClientService {
	mock := &MockSCMClientService{ctrl: ctrl}
	mock.recorder = &MockSCMClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSCMClientService) EXPECT() *MockSCMClientServiceMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockSCMClientService) Client(arg0 core.SCMProvider) (*scm.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", arg0)
	ret0, _ := ret[0].(*scm.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Client indicates an expected call of Client
func (mr *MockSCMClientServiceMockRecorder) Client(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockSCMClientService)(nil).Client), arg0)
}

// WithUser mocks base method
func (m *MockSCMClientService) WithUser(arg0 context.Context, arg1 core.SCMProvider, arg2 *core.User) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithUser indicates an expected call of WithUser
func (mr *MockSCMClientServiceMockRecorder) WithUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUser", reflect.TypeOf((*MockSCMClientService)(nil).WithUser), arg0, arg1, arg2)
}
