// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/code-devel-cover/CodeCover/core (interfaces: HookService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	core "github.com/code-devel-cover/CodeCover/core"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHookService is a mock of HookService interface
type MockHookService struct {
	ctrl     *gomock.Controller
	recorder *MockHookServiceMockRecorder
}

// MockHookServiceMockRecorder is the mock recorder for MockHookService
type MockHookServiceMockRecorder struct {
	mock *MockHookService
}

// NewMockHookService creates a new mock instance
func NewMockHookService(ctrl *gomock.Controller) *MockHookService {
	mock := &MockHookService{ctrl: ctrl}
	mock.recorder = &MockHookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHookService) EXPECT() *MockHookServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockHookService) Create(arg0 context.Context, arg1 *core.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockHookServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHookService)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockHookService) Delete(arg0 context.Context, arg1 *core.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockHookServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHookService)(nil).Delete), arg0, arg1)
}

// Resolve mocks base method
func (m *MockHookService) Resolve(arg0 context.Context, arg1 *core.Repo, arg2 core.HookEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resolve indicates an expected call of Resolve
func (mr *MockHookServiceMockRecorder) Resolve(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockHookService)(nil).Resolve), arg0, arg1, arg2)
}
