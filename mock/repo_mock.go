// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/code-devel-cover/CodeCover/core (interfaces: RepoService,RepoStore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	core "github.com/code-devel-cover/CodeCover/core"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepoService is a mock of RepoService interface
type MockRepoService struct {
	ctrl     *gomock.Controller
	recorder *MockRepoServiceMockRecorder
}

// MockRepoServiceMockRecorder is the mock recorder for MockRepoService
type MockRepoServiceMockRecorder struct {
	mock *MockRepoService
}

// NewMockRepoService creates a new mock instance
func NewMockRepoService(ctrl *gomock.Controller) *MockRepoService {
	mock := &MockRepoService{ctrl: ctrl}
	mock.recorder = &MockRepoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoService) EXPECT() *MockRepoServiceMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockRepoService) List(arg0 context.Context, arg1 core.SCMProvider, arg2 *core.User) ([]*core.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*core.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepoServiceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepoService)(nil).List), arg0, arg1, arg2)
}

// NewReportID mocks base method
func (m *MockRepoService) NewReportID(arg0 *core.Repo) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReportID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// NewReportID indicates an expected call of NewReportID
func (mr *MockRepoServiceMockRecorder) NewReportID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReportID", reflect.TypeOf((*MockRepoService)(nil).NewReportID), arg0)
}

// MockRepoStore is a mock of RepoStore interface
type MockRepoStore struct {
	ctrl     *gomock.Controller
	recorder *MockRepoStoreMockRecorder
}

// MockRepoStoreMockRecorder is the mock recorder for MockRepoStore
type MockRepoStoreMockRecorder struct {
	mock *MockRepoStore
}

// NewMockRepoStore creates a new mock instance
func NewMockRepoStore(ctrl *gomock.Controller) *MockRepoStore {
	mock := &MockRepoStore{ctrl: ctrl}
	mock.recorder = &MockRepoStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoStore) EXPECT() *MockRepoStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRepoStore) Create(arg0 *core.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRepoStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepoStore)(nil).Create), arg0)
}

// Find mocks base method
func (m *MockRepoStore) Find(arg0 *core.Repo) (*core.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*core.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockRepoStoreMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepoStore)(nil).Find), arg0)
}

// Finds mocks base method
func (m *MockRepoStore) Finds(arg0 ...string) ([]*core.Repo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Finds", varargs...)
	ret0, _ := ret[0].([]*core.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finds indicates an expected call of Finds
func (mr *MockRepoStoreMockRecorder) Finds(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finds", reflect.TypeOf((*MockRepoStore)(nil).Finds), arg0...)
}

// Update mocks base method
func (m *MockRepoStore) Update(arg0 *core.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepoStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepoStore)(nil).Update), arg0)
}
